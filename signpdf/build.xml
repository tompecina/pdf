<?xml version="1.0" encoding="UTF-8"?>

<project name="Sign PDF file" default="compile" basedir="..">

  <!-- defs -->
  <property name="package" value="signpdf"/>
  <property name="author" value="Tom\u00e1\u0161 Pecina"/>
  <property name="version" value="1.0"/>
  <property name="license" value="GNU General Public License Version 3"/>
  <property name="prefix" value="cz/pecina/pdf"/>
  <property name="src.dir" value="src"/>
  <property name="test.dir" value="test"/>
  <property name="test.src.dir" value="${test.dir}/src"/>
  <property name="resources.dir" value="res"/>
  <property name="lib.dir" value="lib"/>
  <property name="test.lib.dir" value="${test.dir}/lib"/>
  <property name="bin.dir" value="bin"/>
  <property name="build.dir" value="${package}/build"/>
  <property name="build.lib.dir" value="${build.dir}/lib"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>
  <property name="build.test.classes.dir" value="${build.dir}/test/classes"/>
  <property name="build.licenses.dir" value="${build.dir}/licenses"/>
  <property name="build.src.dir" value="${package}/build-src"/>
  <property name="build.src.filtered.dir" value="${build.dir}/src" />
  <property name="build.test.src.filtered.dir" value="${build.dir}/test/src" />
  <property name="build.src.doc.dir" value="${build.src.dir}/doc"/>
  <property name="temp.dir" value="temp"/>
  <property name="javac.source.version" value="1.8"/>
  <property name="javac.target.version" value="1.8"/>
  <property name="tests" value="Test*"/>

  <!-- classpath -->
  <path id="base.path">
    <pathelement location="${build.classes.dir}"/>
    <pathelement location="${lib.dir}/itextpdf.jar"/>
    <pathelement location="${lib.dir}/commons-cli.jar"/>
    <pathelement location="${lib.dir}//bcprov-ext-jdk.jar"/>
    <pathelement location="${lib.dir}//bcpkix-jdk.jar"/>
  </path>

  <!-- tokens -->
  <filterset id="filterset">
    <filter token="AUTHOR" value="${author}"/>
    <filter token="VERSION" value="${version}"/>
    <filter token="LICENSE" value="${license}"/>
  </filterset>

  <!-- prepare -->
  <target name="prepare" description="Set up directory structure">
    <echo message="Preparing the directory structure"/>
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${build.src.doc.dir}"/>
    <mkdir dir="${build.src.filtered.dir}"/>
    <copy todir="${build.src.filtered.dir}">
      <fileset dir="${src.dir}" includes="**/${package}/**"/>
      <filterset refid="filterset"/>
    </copy>
  </target>
  
  <!-- clean -->
  <target name="clean" description="Remove all generated files">
    <echo message="Cleaning up"/>
    <delete dir="${build.dir}"/>
    <delete dir="${build.src.dir}"/>
    <delete dir="${build.test.src.dir}"/>
    <delete dir="${temp.dir}/**"/>
  </target>

  <!-- fonts -->
  <dependset>
    <srcfileset dir="${bin.dir}/${package}" includes="Carlito-Regular.ttf"/>
    <srcfileset dir="${bin.dir}/${package}" includes="Carlito-Bold.ttf"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/fonts" files="Carlito-Regular.ttf"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/fonts/Carlito-Regular.ttf" property="avail.${package}.fonts"/>
  <target name="fonts" unless="avail.${package}.fonts">
    <echo message="Copying fonts"/>
    <copy todir="${resources.dir}/${prefix}/${package}/fonts">
      <fileset dir="${bin.dir}/${package}" includes="Carlito-Regular.ttf"/>
      <fileset dir="${bin.dir}/${package}" includes="Carlito-Bold.ttf"/>
    </copy>
  </target>

  <!-- graphics -->
  <dependset>
    <srcfileset dir="${bin.dir}/${package}" includes="sealcer.png"/>
    <srcfileset dir="${bin.dir}/${package}" includes="sealappr.png"/>
    <targetfilelist dir="${resources.dir}/${prefix}/${package}/graphics" files="sealcer.png"/>
  </dependset>
  <available file="${resources.dir}/${prefix}/${package}/graphics/sealcer.png" property="avail.${package}.graphics"/>
  <target name="graphics" unless="avail.${package}.graphics">
    <echo message="Copying graphics files"/>
    <copy todir="${resources.dir}/${prefix}/${package}/graphics">
      <fileset dir="${bin.dir}/${package}" includes="sealcer.png"/>
      <fileset dir="${bin.dir}/${package}" includes="sealappr.png"/>
    </copy>
  </target>

  <!-- compile -->
  <target name="compile" depends="prepare,fonts,graphics" description="Compile source code">
    <javac srcdir="${build.src.filtered.dir}" destdir="${build.classes.dir}" classpathref="base.path" includeAntRuntime="false" debug="true" source="${javac.source.version}" target="${javac.target.version}">
      <compilerarg value="-Xlint:deprecation"/>
    </javac>
  </target>

  <!-- javadoc -->
  <target name="javadoc" depends="clean,prepare" description="Generate Javadoc">
    <javadoc sourcepath="${build.src.filtered.dir}" destdir="${build.src.doc.dir}" classpathref="base.path"/>
  </target>

  <!-- jar -->
  <target name="jar" depends="clean,compile" description="Generate application JAR">
    <jar jarfile="${build.lib.dir}/${package}.jar" basedir="${build.classes.dir}">
      <fileset dir="." includes="${resources.dir}/${prefix}/${package}/fonts/*.ttf"/>
      <zipfileset src="${lib.dir}/itextpdf.jar" includes="com/"/>
      <zipfileset src="${lib.dir}/commons-cli.jar" includes="org/"/>
      <zipfileset src="${lib.dir}/bcprov-ext-jdk.jar" includes="org/"/>
      <zipfileset src="${lib.dir}/bcpkix-jdk.jar" includes="org/"/>
      <manifest>
        <attribute name="Main-Class" value="cz.pecina.pdf.signpdf.SignPdf"/>
	<attribute name="Implementation-Vendor" value="Tomáš Pecina"/>
	<attribute name="Implementation-Title" value="Sign PDF file"/>
	<attribute name="Implementation-Version" value="${version}"/>
      </manifest>
    </jar>
  </target>
  
  <!-- run -->
  <target name="run" depends="compile" description="Run application">
    <java classname="cz.pecina.pdf.${package}.SignPdf" classpathref="base.path" fork="true">
      <arg line="${args}"/>
      <assertions>
	<enable/>
      </assertions>
    </java>
  </target>
  
  <!-- debug -->
  <target name="debug" depends="compile" description="Run application with debug">
    <java classname="cz.pecina.pdf.${package}.SignPdf" classpathref="base.path" fork="true">
      <arg line="${args}"/>
      <jvmarg value="-Djava.util.logging.config.file=${package}/debug.properties"/>
      <assertions>
	<enable/>
      </assertions>
    </java>
  </target>
  
  <!-- test.classpath -->
  <path id="test.base.path">
    <pathelement location="${build.classes.dir}"/>
    <pathelement location="${build.test.classes.dir}"/>
    <pathelement location="${lib.dir}/itextpdf.jar"/>
    <pathelement location="${lib.dir}/commons-cli.jar"/>
    <pathelement location="${lib.dir}/bcprov-ext-jdk.jar"/>
    <pathelement location="${lib.dir}//bcpkix-jdk.jar"/>
    <pathelement location="${test.lib.dir}/junit.jar"/>
  </path>

  <!-- test.prepare -->
  <target name="test.prepare" description="Set up test directory structure">
    <echo message="Preparing the test directory structure"/>
    <mkdir dir="${build.test.classes.dir}"/>
    <mkdir dir="${build.test.src.filtered.dir}"/>
    <copy todir="${build.test.src.filtered.dir}">
      <fileset dir="${test.src.dir}" includes="**"/>
      <filterset refid="filterset"/>
    </copy>
  </target>
  
  <!-- test.compile -->
  <target name="test.compile" depends="test.prepare" description="Compile test source code">
    <javac srcdir="${build.test.src.filtered.dir}" destdir="${build.test.classes.dir}" classpathref="test.base.path" includeAntRuntime="false" debug="true" source="${javac.source.version}" target="${javac.target.version}"/>
  </target>

  <!-- test -->
  <target name="test" depends="compile,test.compile" description="Run tests">
    <junit printsummary="yes" haltonerror="yes" haltonfailure="yes" fork="yes">
      <formatter type="plain" usefile="false"/>
      <classpath refid="test.base.path"/>
      <batchtest>
	<fileset dir="${build.test.classes.dir}">
	  <include name="**/${tests}.class"/>
	  <exclude name="**/Test*All.class"/>
	</fileset>
      </batchtest>
    </junit>
  </target>
  
</project>
